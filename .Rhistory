logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
meds
View(pol)
hist(pol$age)
heart<-read.csv(file.choose(),header=T)
head(heart)
tail(heart)
str(heart)
summary(heart)
mod.fit.heart<-glm(formula = TenYearCHD ~ age, family = binomial(link = logit), data = heart)
summary(mod.fit.heart)
# p-hat for age = 50
linear.pred.heart<-mod.fit.heart$coefficients[1] + mod.fit.heart$coefficients[2]*50    ##coefficients[1] is b0 and coefficients[2] is b1
linear.pred.heart
exp(linear.pred.heart)/(1+exp(linear.pred.heart))
# This code gives the same results as the previous 3 lines.
predict.heart<-data.frame(age = 50)
predict(object = mod.fit.heart, newdata = predict.heart, type = "link")
predict(object = mod.fit.heart, newdata = predict.heart, type = "response")
#Basic plot
# Plot of the observed proportions with logistic regression model-axes based on age
plot(x = heart$age, y = heart$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE)
##More advanced plots
# Find the observed proportion of successes at each age (P's)
w<-aggregate(formula = TenYearCHD ~ age, data = heart, FUN = sum) #Computes # at risk for each age
n<-aggregate(formula = TenYearCHD ~ age, data = heart, FUN = length) #Computes sample size for age
w.n<-data.frame(age = w$age, success = w$TenYearCHD, trials = n$TenYearCHD, proportion = round(w$TenYearCHD/n$TenYearCHD, 4))
#Above computes proportion at risk for each age
head(w.n)
tail(w.n)
# Plot of the observed proportions with logistic regression model-extending axes
plot(x = w$age, y = w$TenYearCHD/n$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
xlim = c(20,100), ylim = c(0, 1),
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(20, 100))
# Plot of the observed proportions with logistic regression model-axes based on age
plot(x = w$age, y = w$TenYearCHD/n$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Function for C.I.s - need in order to use with curve function
ci.pi<-function(newdata, mod.fit.heart.obj, alpha){
# print(newdata)  # Test
linear.pred<-predict(object = mod.fit.heart.obj, newdata = newdata, type = "link", se = TRUE)
CI.lin.pred.lower<-linear.pred$fit - qnorm(p = 1-alpha/2)*linear.pred$se
CI.lin.pred.upper<-linear.pred$fit + qnorm(p = 1-alpha/2)*linear.pred$se
CI.pi.lower<-exp(CI.lin.pred.lower) / (1 + exp(CI.lin.pred.lower))
CI.pi.upper<-exp(CI.lin.pred.upper) / (1 + exp(CI.lin.pred.upper))
list(lower = CI.pi.lower, upper = CI.pi.upper)
}
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 32, y = 0.46, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
symbols(x = w$age, y = w$TenYearCHD/n$TenYearCHD, circles = sqrt(n$TenYearCHD), inches = 0.1, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 30, y = 0.51, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
library(gmodels)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
summary(mod.fit.diabetes)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
symbols(x = w$age, y = w$TenYearCHD/n$TenYearCHD, circles = sqrt(n$TenYearCHD), inches = 0.1, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 30, y = 0.51, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
library(gmodels)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
str(heart)
mod.fit.heart<-glm(formula = TenYearCHD ~ age, family = binomial(link = logit), data = heart)
heart<-read.csv(file.choose(),header=T)
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
#Combine medians and log odds into 1 data frame
logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
# Influential points:
plot(mod.fit.pol.ap2.int, which = 4, id.n = 3, sub = "2 Party Interaction Model")
plot(mod.fit.pol.ap.int, which = 4, id.n = 3, sub = "3 Party Interaction Model")
mam<-read.csv(file.choose(), header=T)
library(ggplot2)
library(psych)
str(mam)
#Descriptive Statistics
describe(mam$BrainWeight)
describe(mam$GestationTime)
#Histograms and boxplots
qplot(mam$GestationTime, xlab = "Gestation Time in Days", main = "Gestation Time", binwidth=50) + theme_bw()
qplot(mam$BrainWeight, xlab = "Brain Weight in Grams", main = "Brain Weight", binwidth=100) + theme_bw()
boxplot(mam$GestationTime, ylab = "Gestation Time in Days", main = "Gestation Time")
boxplot(mam$BrainWeight, ylab = "Brain Weight in Grams", main = "Brain Weight")
#Histograms and boxplots
qplot(mam$GestationTime, xlab = "Gestation Time in Days", main = "Gestation Time", binwidth=50) + theme_bw()
qplot(mam$BrainWeight, xlab = "Brain Weight in Grams", main = "Brain Weight", binwidth=100) + theme_bw()
boxplot(mam$GestationTime, ylab = "Gestation Time in Days", main = "Gestation Time")
boxplot(mam$BrainWeight, ylab = "Brain Weight in Grams", main = "Brain Weight")
##Basic Scatterplot
ggplot(mam, aes(x=BrainWeight, y=GestationTime)) + geom_point(shape=16, size=3) +
labs(x = "Brain Weight in Grams",y="Gestation Time in Days", title="Gestation Time vs Brain Weight")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))+    ##Change size of tick text in x-axis label
geom_smooth(method="lm", se=FALSE)
gesell<-read.csv(file.choose(), header=T)
library(ggplot2)
##Correlation-full dataset
cor(gesell$age, gesell$score)
##Basic Scatterplot with lm-full dataset
ggplot(gesell, aes(x=age, y=score)) + geom_point(shape=16, size=3) +
labs(x = "Age at First Word (months)", y="Score", title="Gesell Test")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.4)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.4)))+    ##Change size of tick text in x-axis label
geom_smooth(method="lm", se=FALSE)+
geom_text(data=gesell, aes(x=age, y=score,label=child), vjust=1.5)  ##Add labels for each child
##Fit linear model-full dataset
modelGesell <- lm(gesell$score~gesell$age)
summary(modelGesell)
##Analysis without child 18
##Create subset of data with outlier removed
##The outlier was in row 18
gesell18 = gesell[-18,]
##Correlation-without Child 18
cor(gesell18$age, gesell18$score)
##Basic Scatterplot with lm-without Child 18
ggplot(gesell18, aes(x=age, y=score)) + geom_point(shape=16, size=3) +
labs(x = "Age at First Word (months)", y="Score", title="Gesell Test-Excluding Child 18")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.4)))+
theme(axis.text.y = element_text(size = rel(1.4)))+
geom_smooth(method="lm", se=FALSE)
##Fit linear model-without Child 18
modelGesell18 <- lm(gesell18$score~gesell18$age)
summary(modelGesell18)
##Analysis without child 19
##Create subset of data with outlier removed
##The outlier was in row 19
gesell19 = gesell[-19,]
##Correlation-without Child 19
cor(gesell19$age, gesell19$score)
##Basic Scatterplot with lm-without Child 19
ggplot(gesell19, aes(x=age, y=score)) + geom_point(shape=16, size=3) +
labs(x = "Age at First Word (months)", y="Score", title="Gesell Test-Excluding Child 19")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.4)))+
theme(axis.text.y = element_text(size = rel(1.4)))+
geom_smooth(method="lm", se=FALSE)
##Fit linear model-without Child 19
modelGesell19 <- lm(gesell19$score~gesell19$age)
##Create a data frame including results from the lm() function
outGes = fortify(modelGesell)
head(outGes)
##Add child ID to outGes data frame
outGes <- merge(gesell, outGes, by = "row.names")
###Leverage cut-offs:
## n of IVs
k <- 1
## Find n
n <- nrow(gesell)
(lev.cutoff.low<-2*(k+1)/n)
(lev.cutoff.high<-3*(k+1)/n)
##Create plot with leverage values on x-axis and studentized residuals on y-axis, size by Cook's D
levPlotGes <- ggplot(outGes, aes(x=.hat, y=.stdresid, size=.cooksd,
label=child,
##Including label=child will label the points by child in the interactive plot from plotly
text = paste0("Child: ", child, "</br></br>Leverage: ", round(.hat, 2), "</br>Std Residual: ",
round(.stdresid, 2), "</br>Cooks D: ", round(.cooksd, 2)))) + geom_point() +
##Including text = ... will change out the output for the points in the plotly
labs(x = "Leverage Values",y="Studentized Residuals",title="Leverage and Influence Plot")+
theme_bw()+geom_hline(yintercept=0)+xlim(0, .7)+ylim(-5, 5)+
geom_vline(xintercept=lev.cutoff.low, colour="blue")+
geom_vline(xintercept=lev.cutoff.high, colour="red")+
geom_text(aes(x=0.08,y=-4,label="leverage cut-off=0.19",size=NULL),vjust=1.5)+
geom_text(aes(x=0.4,y=-4,label="leverage cut-off=0.29",size=NULL),vjust=1.5)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")+guides(size=guide_legend("Cook's D"))
levPlotGes
##Use plotly library to make the plot interactive
##Create plot
library(plotly)
InteractiveLevPlot=ggplotly(levPlotGes, tooltip = "text")
##Note the legend does not show up in the interactive plot.
InteractiveLevPlot
##Create plot with leverage values on x-axis and studentized residuals on y-axis, size by Cook's D
levPlotGes <- ggplot(outGes, aes(x=.hat, y=.stdresid, size=.cooksd,
label=child,
##Including label=child will label the points by child in the interactive plot from plotly
text = paste0("Child: ", child, "</br></br>Leverage: ", round(.hat, 2), "</br>Std Residual: ",
round(.stdresid, 2), "</br>Cooks D: ", round(.cooksd, 2)))) + geom_point() +
##Including text = ... will change out the output for the points in the plotly
geom_point() +
labs(x = "Leverage Values",y="Studentized Residuals",title="Leverage and Influence Plot")+
theme_bw()+geom_hline(yintercept=0)+xlim(0, .7)+ylim(-5, 5)+
geom_vline(xintercept=lev.cutoff.low, colour="blue")+
geom_vline(xintercept=lev.cutoff.high, colour="red")+
geom_text(aes(x=0.08,y=-4,label="leverage cut-off=0.19",size=NULL),vjust=1.5)+
geom_text(aes(x=0.4,y=-4,label="leverage cut-off=0.29",size=NULL),vjust=1.5)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")+guides(size=guide_legend("Cook's D"))
levPlotGes
##Use plotly library to make the plot interactive
##Create plot
library(plotly)
InteractiveLevPlot=ggplotly(levPlotGes, tooltip = "text")
##Note the legend does not show up in the interactive plot.
InteractiveLevPlot
##Create plot with leverage values on x-axis and studentized residuals on y-axis, size by Cook's D
levPlotGes <- ggplot(outGes, aes(x=.hat, y=.stdresid, size=.cooksd,
label=child,
##Including label=child will label the points by child in the interactive plot from plotly
text = paste0("Child: ", child, "</br></br>Leverage: ", round(.hat, 2), "</br>Std Residual: ",
round(.stdresid, 2), "</br>Cooks D: ", round(.cooksd, 2)))) + geom_point() +
##Including text = ... will change out the output for the points in the plotly
geom_point() +
labs(x = "Leverage Values",y="Studentized Residuals",title="Leverage and Influence Plot")+
theme_bw()+
xlim(0, .7)+ylim(-5, 5)+
geom_hline(yintercept=0)+
geom_vline(xintercept=lev.cutoff.low, colour="blue")+
geom_vline(xintercept=lev.cutoff.high, colour="red")+
geom_text(aes(x=0.08,y=-4,label="leverage cut-off=0.19",size=NULL),vjust=1.5)+
geom_text(aes(x=0.4,y=-4,label="leverage cut-off=0.29",size=NULL),vjust=1.5)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")+guides(size=guide_legend("Cook's D"))
InteractiveLevPlot=ggplotly(levPlotGes, tooltip = "text")
##Note the legend does not show up in the interactive plot.
InteractiveLevPlot
##Create plot with leverage values on x-axis and studentized residuals on y-axis, size by Cook's D
levPlotGes <- ggplot(outGes, aes(x=.hat, y=.stdresid, size=.cooksd,
label=child,
##Including label=child will label the points by child in the interactive plot from plotly
text = paste0("Child: ", child, "</br></br>Leverage: ", round(.hat, 2), "</br>Std Residual: ",
round(.stdresid, 2), "</br>Cooks D: ", round(.cooksd, 2)))) + geom_point() +
##Including text = ... will change out the output for the points in the plotly
geom_point() +
labs(x = "Leverage Values",y="Studentized Residuals",title="Leverage and Influence Plot")+
theme_bw()+
xlim(0, .7)+ylim(-5, 5)+
geom_hline(yintercept=0)+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")+
geom_vline(xintercept=lev.cutoff.low, colour="blue")+
geom_vline(xintercept=lev.cutoff.high, colour="red")+
geom_text(aes(x=0.08,y=-4,label="leverage cut-off=0.19",size=NULL),vjust=1.5)+
geom_text(aes(x=0.4,y=-4,label="leverage cut-off=0.29",size=NULL),vjust=1.5)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
guides(size=guide_legend("Cook's D"))
levPlotGes
InteractiveLevPlot=ggplotly(levPlotGes, tooltip = "text")
##Note the legend does not show up in the interactive plot.
InteractiveLevPlot
##Note the legend does not show up in the interactive plot.
InteractiveLevPlot
# Organizations/Affiliations to show in About widget
organizations:
- name: cat(Iowa State University\nDepartment of Statistics)
url: https://www.stat.iastate.edu/
catJump<-read.csv(file.choose(), header=T)
library(ggplot2)
library(psych)
##Descriptive statistics including variable numbers
describe(catJump)
##Scatterplot matrix
##All quantitative variables 3-7
pairs(catJump[,c(3:7)], main="Cat Jumping Scatterplot Matrix")
##Correlation matrix
cormatrix <- round(cor(catJump[,c(3:7)]),2)
cormatrix
##Partial correlations controlling for body fat
partial.r(cormatrix, c(5, 1:3), 4)
##Regression model: X1 = bodyMass, X2 = hindLimbLength, X3 = muscleMass, X4 = bodyFat, X5 = sex
modelCat2 <- lm(catJump$takeoffVelocity~catJump$sex+catJump$bodyMass+catJump$hindLimbLength+catJump$muscleMass+catJump$bodyFat)
summary(modelCat2)
##Plots of residuals
##Create a data frame including results from the lm() function
outCat = fortify(modelCat2)
head(outCat)
##Create standardized residual plot with predicted values on x-axis
ggplot(outCat, aes(x=.fitted, y=.stdresid)) +
geom_point(shape=16, size=3) +
labs(x = "Predicted Takeoff Velocity",y="Standardized Residuals",title="Standardized Residual Plot") +
theme_bw()+geom_hline(yintercept=0)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")
##Create plot with leverage values on x-axis and STANDARDIZED residuals on y-axis, size by cooks d
###Leverage cut-offs:
(lev.cutoff.low<-2*(5+1)/18)
(lev.cutoff.high<-3*(5+1)/18)
levPlot=ggplot(outCat, aes(x=.hat, y=.stdresid, size=.cooksd)) + geom_point() +
labs(x = "Leverage Values",y="Standardized Residuals",title="Influence Plot")+
theme_bw()+geom_hline(yintercept=0)+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+
theme(axis.title.y = element_text(size = rel(1.4)))+
theme(axis.title.x = element_text(size = rel(1.4)))+
theme(axis.text.x = element_text(size = rel(1.6)))+
theme(axis.text.y = element_text(size = rel(1.6)))+
geom_hline(yintercept=2, colour="blue")+
geom_hline(yintercept=-2, colour="blue")+
geom_hline(yintercept=3, colour="red")+
geom_hline(yintercept=-3, colour="red")+guides(size=guide_legend(title="Cook's D"))+
geom_vline(xintercept=lev.cutoff.low, colour="blue")+
geom_vline(xintercept=lev.cutoff.high, colour="red")+
geom_text(aes(x=0.6,y=-2,label="leverage cut-off=0.67",size=NULL),vjust=1.5)+
geom_text(aes(x=.9,y=-2.5,label="leverage cut-off=1",size=NULL),vjust=1.5)
levPlot
##Use plotly library to make the plot interactive
library(plotly)
InteractiveLevPlot=ggplotly(levPlot)
InteractiveLevPlot
##Graph between takeoffVelocity and bodyMass, color coded by muscleMass
##First find the mean of muscleMass (the variable we are color coding by)
meanMuscleMass = mean(catJump$muscleMass)
meanMuscleMass  ##Check to see if the mean income was computed
##Then create the graph
ggplot(catJump, aes(y=takeoffVelocity, x=bodyMass, color=muscleMass))+
geom_point(aes(size=3))+scale_size(guide = 'none')+
scale_color_gradient2(midpoint=meanMuscleMass, low="blue", mid="yellow", high="red", name="Muscle Mass", guide = "colourbar")+
labs(x = "Body Mass",y="Takeoff Velocity", title="Predicting Takeoff Velocity")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
##OR
ggplot(catJump, aes(y=takeoffVelocity, x=bodyMass, color=muscleMass))+
geom_point(aes(size=3))+scale_size(guide = 'none')+
scale_color_gradient2(midpoint=meanMuscleMass, low = "#0000FF", mid = "#FFFFFF", high ="#FF0000", name="Muscle Mass", guide = "colourbar")+
labs(x = "Body Mass",y="Takeoff Velocity", title="Predicting Takeoff Velocity")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
##Graph between takeoffVelocity and bodyMass, color coded by muscleMass, size by hindLimbLength
ggplot(catJump, aes(y=takeoffVelocity, x=bodyMass, color=muscleMass))+
geom_point(aes(size = hindLimbLength)) + scale_size_continuous(range = c(3,8))+
scale_color_gradient2(midpoint=meanMuscleMass, low="blue", mid="yellow", high="red", name="Muscle Mass", guide = "colourbar")+
labs(x = "Body Mass",y="Takeoff Velocity", title="Predicting Takeoff Velocity")+
theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
##Catterplot Fun
## https://github.com/Gibbsdavidl/CatterPlots
library(devtools)
install_github("Gibbsdavidl/CatterPlots") ##Only need to run this line of code once on your computer.
library(CatterPlots)
catplot(xs=catJump$bodyMass, ys=catJump$takeoffVelocity, catcolor='darkgrey',
canvas=c(.2,1.1, .6, 1.1), ##These numbers change the spatial location of the axes.
cat=3, xlab="Body Mass", ylab="Takeoff Velocity", main="Jumping Cats")
##Cat type by sex
library(car)
##Create new color column for coding female as red and male as blue, requires car package
catJump$catColor<-recode(catJump$sex,"'f'='red'")
catJump$catColor<-recode(catJump$catColor,"'m'='blue'")
multicat(xs=catJump$bodyMass, ys=catJump$takeoffVelocity, cat=c(5),
canvas=c(.2,1.1, .6, 1.1),
catcolor=catJump$catColor,
xlab="Body Mass", ylab="Takeoff Velocity", main="Jumping Cats by Sex \nFemale=Red, Male=Blue")
# random cats
x <- -10:10
y <- -x^2 + 10
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list('darkgrey','blue','red','black'),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cat variable", ylab="other cat variable", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list('darkgrey','blue','red','black'),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cat variable", ylab="other cat variable", main="Random Cats")
x <- -10:10
y <- -x^2 + 10
purr <- catplot(xs=x, ys=y, cat=3, catcolor='#000000FF')
cats(purr, -x, -y, cat=4, catcolor='#FF0000')
# for more fun ...
meow <- multicat(xs=x, ys=y, cat=c(1,2,3), catcolor=list('#33FCFF','#FF0000'), canvas=c(-0.1,1.1, -0.1, 1.1))
morecats(meow, x, 10*sin(x)+40, size=0.05, cat=c(4,5,6), catcolor=list('#0495EE','#EE7504'), type="line")
# random cats
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list('#33FCFF'),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
# random cats
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list('#33FCFF'),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
# random cats
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list('#33FCFF'),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
x <- -10:10
y <- -x^2 + 10
rainbowCats(x, y, yspread=0.05, xspread=0.05, ptsize=2, catshiftx=0.5, catshifty=-0.2, canvas=c(-0.5,1.5,-1,1.5))
library(blogdown)
install.packages("blogdown")
library(blogdown)
serve_site
serve_site()
install.packages("hugo")
install_hugo()
serve_site()
