curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "3 Party Without Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Male"), type = "response"),
col = "green", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Female"), type = "response"),
col = "green", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.75, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "No Party Leaning-Male", "No Party Leaning-Female",
"Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "green", "green", "blue", "blue"), lwd = c(1,1), bty = "n")
##Party with 3 categories interaction
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "3 Party Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Male"), type = "response"),
col = "green", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Female"), type = "response"),
col = "green", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.75, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "No Party Leaning-Male", "No Party Leaning-Female",
"Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "green", "green", "blue", "blue"), lwd = c(1,1), bty = "n")
#####################################################################
# Odds ratios for partyLean2 interaction
##Odds ratios for partyLean2
beta.hat<-mod.fit.pol.ap2.int$coefficients[3:5] #Coefficients for 3=age, 4=party, and 5=age*party
c<-1
agefixed<-seq(from = 20, to = 60, by = 20)
ORparty2<-exp(c*(beta.hat[2] + beta.hat[3]*agefixed))
cov.mat<-vcov(mod.fit.pol.ap2.int)[3:5,3:5]
var.log.OR<-cov.mat[2,2] + agefixed^2*cov.mat[3,3] + 2*agefixed*cov.mat[2,3]
ci.log.OR.low<-c*(beta.hat[2] + beta.hat[3]*agefixed) - c*qnorm(p = 0.975)*sqrt(var.log.OR)
ci.log.OR.up<-c*(beta.hat[2] + beta.hat[3]*agefixed) + c*qnorm(p = 0.975)*sqrt(var.log.OR)
round(data.frame(age = agefixed, OR.hat = ORparty2,
OR.low = exp(ci.log.OR.low), OR.up =
exp(ci.log.OR.up)),2)
c<-10   #10-year increment
partyfixed<-0:1 #0=Democrat or 1=Republican
ORD<-exp(c*(beta.hat[1] + beta.hat[3]*partyfixed))
var.log.OR<-cov.mat[1,1] + partyfixed^2*cov.mat[3,3] + 2*partyfixed*cov.mat[1,3]
ci.log.OR.low<-c*(beta.hat[1] + beta.hat[3]*partyfixed) - c*qnorm(p = 0.975)*sqrt(var.log.OR)
ci.log.OR.up<-c*(beta.hat[1] + beta.hat[3]*partyfixed) + c*qnorm(p = 0.975)*sqrt(var.log.OR)
data.frame(ORD, OR.low = exp(ci.log.OR.low), OR.up = exp(ci.log.OR.up))
round(data.frame(Party = partyfixed, OR.hat = ORD, OR.low
= exp(ci.log.OR.low), OR.up = exp(ci.log.OR.up)),3)
# Convert TrumpApproval to 0/1
library(dplyr)
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
# Minimum sample size:
library(sjstats)
p <- prop(pol, TrumpApproval01 == 1) ##P = Proportion of successes
q <- prop(pol, TrumpApproval01 == 0) ##Q = Proportion of failures
k <- 4 ##Number of independent variables for 2 category party variable
k2 <- 6 ##Number of independent variables for 3 category party variable
minN <- 10*k/min(p, q)
minN
minN2 <- 10*k2/min(p, q)
minN2
# Linearity:  Graph between log odds and age
library(ggplot2)
pol$TrumpApproval01 <- as.numeric(pol$TrumpApproval01) ##Convert categorical to be analyzed as numeric for probability code
# Find quantiles for Age
summary(pol$age)
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
logits
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
#Combine medians and log odds into 1 data frame
logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
# Compute log odds
logits <- log(probs/(1-probs))
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
p1
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
# Compute probability of accommodations for x1mtheff groups (created using quartiles)
p1 <- mean(math$x1macc[math$x1mtheff < (-.56)], na.rm=TRUE)
#Change values of -7, -8, and -9 to missing values (NA)
math$x1mtheff[math$x1mtheff==-9] <- NA
math$x1mtheff[math$x1mtheff==-8] <- NA
math$x1mtheff[math$x1mtheff==-7] <- NA
math$x1mthid[math$x1mthid==-9] <- NA
math$x1mthid[math$x1mthid==-8] <- NA  ##Math identity did not have any -7's
math$x1txmth[math$x1txmth==-8] <- NA  ##Math scores did not have any -7's or -9's
math$x1par1emp[math$x1par1emp==-9] <- NA
math$x1par1emp[math$x1par1emp==-8] <- NA
math$x1par1emp[math$x1par1emp==-7] <- NA
math$x1macc[math$x1macc==-8] <- NA  ##Test Accommodations did not have any -7's or -9's
math$x1sex[math$x1sex==-9] <- NA  ##Sex did not have any -7's or -8's
mod.fit.eff<-glm(formula = x1macc ~ x1mtheff, family = binomial(link = logit), data = math)
mod.fit.sex<-glm(formula = x1macc ~ x1sex, family = binomial(link = logit), data = math)
f
mod.fit.sex.eff<-glm(formula = x1macc ~ x1sex + x1mtheff, family = binomial(link = logit), data = math)
# Estimated odds ratio for Sex
exp(mod.fit.sex.eff$coefficients[2])
# Estimated odds ratio for math self-efficacy
exp(mod.fit.sex.eff$coefficients[3])
# Minimum sample size:
library(sjstats)
p <- prop(math, x1macc == 1) ##P = Proportion of successes
q <- prop(math, x1macc == 0) ##Q = Proportion of failures
k <- 2 ##Number of independent variables
minN <- 10*k/min(p, q)
minN
# Linearity:  Graph between log odds and x1mtheff
library(ggplot2)
# Modify x1macc variable
math$x1macc <- as.numeric(math$x1macc) ##Convert categorical to be analyzed as numeric for probability code
math$x1macc <- math$x1macc - 1 ##Convert accommodations to be coded as 0/1 instead of 1/2
# Find quantiles for x1mtheff
summary(math$x1mtheff)
# Compute probability of accommodations for x1mtheff groups (created using quartiles)
p1 <- mean(math$x1macc[math$x1mtheff < (-.56)], na.rm=TRUE)
p2 <- mean(math$x1macc[math$x1mtheff>= (-.56) & math$x1mtheff<.1], na.rm=TRUE)
p3 <- mean(math$x1macc[math$x1mtheff>=.1 & math$x1mtheff<.55], na.rm=TRUE)
p4 <- mean(math$x1macc[math$x1mtheff>=.55], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
logits
summmary(math$x1macc)
summary(math$x1macc)
summary(pol$TrumpApproval01)
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
# Minimum sample size:
library(sjstats)
p <- prop(pol, TrumpApproval01 == 1) ##P = Proportion of successes
q <- prop(pol, TrumpApproval01 == 0) ##Q = Proportion of failures
k <- 4 ##Number of independent variables for 2 category party variable
k2 <- 6 ##Number of independent variables for 3 category party variable
minN <- 10*k/min(p, q)
minN
minN2 <- 10*k2/min(p, q)
minN2
pol$TrumpApproval01 <- as.numeric(pol$TrumpApproval01) ##Convert categorical to be analyzed as numeric for probability code
# Find quantiles for Age
summary(pol$age)
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
summary(pol$TrumpApproval01)
pol$TrumpApproval01 <- as.numeric(pol$TrumpApproval01) ##Convert categorical to be analyzed as numeric for probability code
summary(pol$TrumpApproval01)
summary(pol$TrumpApproval)
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
summary(pol$TrumpApproval01)
pol$TrumpApproval01 <- as.numeric(pol$TrumpApproval01) ##Convert categorical to be analyzed as numeric for probability code
summary(pol$TrumpApproval01)
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
pol$TrumpApproval01 <- as.numeric(as.character(pol$TrumpApproval01)) ##Convert categorical to be analyzed as numeric for probability code
summary(pol$TrumpApproval01)
# Find quantiles for Age
summary(pol$age)
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
logits
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
#Combine medians and log odds into 1 data frame
logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
# Find quantiles for Age
summary(pol$age)
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
logits
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
pol<-read.csv(file.choose(),header=T, na.strings=c(""))
head(pol)
str(pol)
summary(pol)
##What is the current order? Should be alphabetical where first in alphabet = failure and second is success
pol$TrumpApproval <- as.factor(pol$TrumpApproval) #The levels() function requires the variable to be a factor
levels(pol$TrumpApproval)
#We want to switch the order
pol$TrumpApproval <- factor(pol$TrumpApproval, levels = c("Disapprove", "Approve"))
levels(pol$TrumpApproval)
mod.fit.pol.sap2<-glm(formula = TrumpApproval ~ sex+age+partyLean2, family = binomial(link = logit), data = pol)
summary(mod.fit.pol.sap2)
mod.fit.pol.ap2.int<-glm(formula = TrumpApproval ~ sex+age*partyLean2, family = binomial(link = logit), data = pol)
summary(mod.fit.pol.ap2.int)
mod.fit.pol.sap<-glm(formula = TrumpApproval ~ sex+age+partyLean, family = binomial(link = logit), data = pol)
summary(mod.fit.pol.sap)
mod.fit.pol.ap.int<-glm(formula = TrumpApproval ~ sex+partyLean*age, family = binomial(link = logit), data = pol)
summary(mod.fit.pol.ap.int)
##Compare models with interaction (full model) and without interaction (reduced model)
anova(mod.fit.pol.sap2, mod.fit.pol.ap2.int, test = "Chisq")
anova(mod.fit.pol.sap, mod.fit.pol.ap.int, test = "Chisq")
##No interactions-Party with 2 categories
curve(expr = predict(object = mod.fit.pol.sap2, newdata = data.frame(age = x, partyLean2 = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "2 Party Without Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.sap2, newdata = data.frame(age = x, partyLean2 = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap2, newdata = data.frame(age = x, partyLean2 = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap2, newdata = data.frame(age = x, partyLean2 = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.55, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "blue", "blue"), lwd = c(1,1), bty = "n")
##Party with 2 categories interaction
curve(expr = predict(object = mod.fit.pol.ap2.int, newdata = data.frame(age = x, partyLean2 = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "2 Party Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.ap2.int, newdata = data.frame(age = x, partyLean2 = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap2.int, newdata = data.frame(age = x, partyLean2 = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap2.int, newdata = data.frame(age = x, partyLean2 = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.55, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "blue", "blue"), lwd = c(1,1), bty = "n")
##No interactions-Party with 3 categories
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "3 Party Without Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Male"), type = "response"),
col = "green", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.sap, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Female"), type = "response"),
col = "green", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.75, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "No Party Leaning-Male", "No Party Leaning-Female",
"Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "green", "green", "blue", "blue"), lwd = c(1,1), bty = "n")
##Party with 3 categories interaction
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Male"), type = "response"), col = "red", lty = "solid", xlim = c(10,100),
ylim = c(0,1), ylab = "Estimated probability of approval", main = "3 Party Interaction",
xlab = "Age", panel.first = grid(col = "gray", lty = "dotted"), cex.main = 0.9, lwd = 1)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Rep/lean Rep", sex = "Female"), type = "response"),
col = "red", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Male"), type = "response"),
col = "blue", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "Dem/lean Dem", sex = "Female"), type = "response"),
col = "blue", lty = "dotdash", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Male"), type = "response"),
col = "green", lty = "solid", lwd = 1, add = TRUE)
curve(expr = predict(object = mod.fit.pol.ap.int, newdata = data.frame(age = x, partyLean = "DK/Ref-no lean", sex = "Female"), type = "response"),
col = "green", lty = "dotdash", lwd = 1, add = TRUE)
legend(x = 12, y = 0.75, legend = c("Republican Leaning-Male", "Republican Leaning-Female", "No Party Leaning-Male", "No Party Leaning-Female",
"Democrat Leaning-Male", "Democrat Leaning-Female"),
lty = c("solid", "dotdash", "solid", "dotdash", "solid", "dotdash"), col = c("red", "red", "green", "green", "blue", "blue"), lwd = c(1,1), bty = "n")
#####################################################################
# Odds ratios for partyLean2 interaction
##Odds ratios for partyLean2
beta.hat<-mod.fit.pol.ap2.int$coefficients[3:5] #Coefficients for 3=age, 4=party, and 5=age*party
c<-1
agefixed<-seq(from = 20, to = 60, by = 20)
ORparty2<-exp(c*(beta.hat[2] + beta.hat[3]*agefixed))
cov.mat<-vcov(mod.fit.pol.ap2.int)[3:5,3:5]
var.log.OR<-cov.mat[2,2] + agefixed^2*cov.mat[3,3] + 2*agefixed*cov.mat[2,3]
ci.log.OR.low<-c*(beta.hat[2] + beta.hat[3]*agefixed) - c*qnorm(p = 0.975)*sqrt(var.log.OR)
ci.log.OR.up<-c*(beta.hat[2] + beta.hat[3]*agefixed) + c*qnorm(p = 0.975)*sqrt(var.log.OR)
round(data.frame(age = agefixed, OR.hat = ORparty2,
OR.low = exp(ci.log.OR.low), OR.up =
exp(ci.log.OR.up)),2)
c<-10   #10-year increment
partyfixed<-0:1 #0=Democrat or 1=Republican
ORD<-exp(c*(beta.hat[1] + beta.hat[3]*partyfixed))
var.log.OR<-cov.mat[1,1] + partyfixed^2*cov.mat[3,3] + 2*partyfixed*cov.mat[1,3]
ci.log.OR.low<-c*(beta.hat[1] + beta.hat[3]*partyfixed) - c*qnorm(p = 0.975)*sqrt(var.log.OR)
ci.log.OR.up<-c*(beta.hat[1] + beta.hat[3]*partyfixed) + c*qnorm(p = 0.975)*sqrt(var.log.OR)
data.frame(ORD, OR.low = exp(ci.log.OR.low), OR.up = exp(ci.log.OR.up))
round(data.frame(Party = partyfixed, OR.hat = ORD, OR.low
= exp(ci.log.OR.low), OR.up = exp(ci.log.OR.up)),3)
# Convert TrumpApproval to 0/1
library(dplyr)
pol$TrumpApproval01 <- recode(pol$TrumpApproval, Approve = "1", Disapprove = "0")
# Minimum sample size:
library(sjstats)
p <- prop(pol, TrumpApproval01 == 1) ##P = Proportion of successes
q <- prop(pol, TrumpApproval01 == 0) ##Q = Proportion of failures
k <- 4 ##Number of independent variables for 2 category party variable
k2 <- 6 ##Number of independent variables for 3 category party variable
minN <- 10*k/min(p, q)
minN
minN2 <- 10*k2/min(p, q)
minN2
# Linearity:  Graph between log odds and age
library(ggplot2)
pol$TrumpApproval01 <- as.numeric(as.character(pol$TrumpApproval01)) ##Convert categorical to be analyzed as numeric for probability code
# Find quantiles for Age
summary(pol$age)
# Compute probability of risk of CHD for age groups (created using quartiles)
p1 <- mean(pol$TrumpApproval01[pol$age<38], na.rm=TRUE)
p2 <- mean(pol$TrumpApproval01[pol$age>=38 & pol$age<54], na.rm=TRUE)
p3 <- mean(pol$TrumpApproval01[pol$age>=54 & pol$age<67], na.rm=TRUE)
p4 <- mean(pol$TrumpApproval01[pol$age>=67], na.rm=TRUE)
probs <- c(p1, p2, p3, p4)
probs
# Compute log odds
logits <- log(probs/(1-probs))
logits
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
#Combine medians and log odds into 1 data frame
logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
meds
View(pol)
hist(pol$age)
heart<-read.csv(file.choose(),header=T)
head(heart)
tail(heart)
str(heart)
summary(heart)
mod.fit.heart<-glm(formula = TenYearCHD ~ age, family = binomial(link = logit), data = heart)
summary(mod.fit.heart)
# p-hat for age = 50
linear.pred.heart<-mod.fit.heart$coefficients[1] + mod.fit.heart$coefficients[2]*50    ##coefficients[1] is b0 and coefficients[2] is b1
linear.pred.heart
exp(linear.pred.heart)/(1+exp(linear.pred.heart))
# This code gives the same results as the previous 3 lines.
predict.heart<-data.frame(age = 50)
predict(object = mod.fit.heart, newdata = predict.heart, type = "link")
predict(object = mod.fit.heart, newdata = predict.heart, type = "response")
#Basic plot
# Plot of the observed proportions with logistic regression model-axes based on age
plot(x = heart$age, y = heart$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE)
##More advanced plots
# Find the observed proportion of successes at each age (P's)
w<-aggregate(formula = TenYearCHD ~ age, data = heart, FUN = sum) #Computes # at risk for each age
n<-aggregate(formula = TenYearCHD ~ age, data = heart, FUN = length) #Computes sample size for age
w.n<-data.frame(age = w$age, success = w$TenYearCHD, trials = n$TenYearCHD, proportion = round(w$TenYearCHD/n$TenYearCHD, 4))
#Above computes proportion at risk for each age
head(w.n)
tail(w.n)
# Plot of the observed proportions with logistic regression model-extending axes
plot(x = w$age, y = w$TenYearCHD/n$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
xlim = c(20,100), ylim = c(0, 1),
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(20, 100))
# Plot of the observed proportions with logistic regression model-axes based on age
plot(x = w$age, y = w$TenYearCHD/n$TenYearCHD, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Function for C.I.s - need in order to use with curve function
ci.pi<-function(newdata, mod.fit.heart.obj, alpha){
# print(newdata)  # Test
linear.pred<-predict(object = mod.fit.heart.obj, newdata = newdata, type = "link", se = TRUE)
CI.lin.pred.lower<-linear.pred$fit - qnorm(p = 1-alpha/2)*linear.pred$se
CI.lin.pred.upper<-linear.pred$fit + qnorm(p = 1-alpha/2)*linear.pred$se
CI.pi.lower<-exp(CI.lin.pred.lower) / (1 + exp(CI.lin.pred.lower))
CI.pi.upper<-exp(CI.lin.pred.upper) / (1 + exp(CI.lin.pred.upper))
list(lower = CI.pi.lower, upper = CI.pi.upper)
}
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 32, y = 0.46, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
symbols(x = w$age, y = w$TenYearCHD/n$TenYearCHD, circles = sqrt(n$TenYearCHD), inches = 0.1, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 30, y = 0.51, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
library(gmodels)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
summary(mod.fit.diabetes)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
symbols(x = w$age, y = w$TenYearCHD/n$TenYearCHD, circles = sqrt(n$TenYearCHD), inches = 0.1, xlab = "Age", ylab = "Estimated probability",
main = "Predicting Probability of Heart Disease Risk",
panel.first = grid(col = "gray", lty = "dotted"))
# Put estimated logistic regression model on the plot
curve(expr = predict(object = mod.fit.heart, newdata = data.frame(age = x), type = "response"), col = "red", add = TRUE,
xlim = c(30, 70))
# Plot C.I. bands
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$lower, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
curve(expr = ci.pi(newdata = data.frame(age = x), mod.fit.heart.obj = mod.fit.heart, alpha = 0.05)$upper, col = "blue",
lty = "dotdash", add = TRUE, xlim = c(30, 70))
# Legend
legend(x = 30, y = 0.51, legend = c("Logistic regression model", "95% individual C.I."), lty = c("solid", "dotdash"), col = c("red", "blue"), bty = "n")
library(gmodels)
# The rows will be the first variable in your code and the columns will be the second variable in your code.
CrossTable(heart$diabetes, heart$TenYearCHD, chisq=TRUE)
mod.fit.diabetes<-glm(formula = TenYearCHD ~ diabetes, family = binomial(link = logit), data = heart)
str(heart)
mod.fit.heart<-glm(formula = TenYearCHD ~ age, family = binomial(link = logit), data = heart)
heart<-read.csv(file.choose(),header=T)
# Compute median age for each age group
q <- quantile(pol$age, probs=seq(0, 1, 0.25), na.rm=TRUE)
meds <- c(median(pol$age[pol$age<q[2]], na.rm=TRUE),
median(pol$age[pol$age>=q[2] & pol$age<q[3]], na.rm=TRUE),
median(pol$age[pol$age>=q[3] & pol$age<q[4]], na.rm=TRUE),
median(pol$age[pol$age>=q[4]], na.rm=TRUE))
#Combine medians and log odds into 1 data frame
logOddsAges <- data.frame(meds, logits)
# Plot log odds versus medians
ggplot(logOddsAges, aes(x=meds, y=logits)) + geom_point(shape=16, size=3) +
labs(x = "Age",y="Log Odds", title="Log Odds versus Age")+theme_bw()+
theme(plot.title = element_text(hjust=0.5, size = rel(2)))+    ##Change size of text in title
theme(axis.title.y = element_text(size = rel(1.4)))+    ##Change size of label text in y-axis label
theme(axis.title.x = element_text(size = rel(1.4)))+    ##Change size of label text in x-axis label
theme(axis.text.x = element_text(size = rel(1.6)))+    ##Change size of tick text in y-axis label
theme(axis.text.y = element_text(size = rel(1.6)))    ##Change size of tick text in x-axis label
# Influential points:
plot(mod.fit.pol.ap2.int, which = 4, id.n = 3, sub = "2 Party Interaction Model")
plot(mod.fit.pol.ap.int, which = 4, id.n = 3, sub = "3 Party Interaction Model")
